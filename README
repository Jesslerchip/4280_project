### Jessica Seabolt CMP SCI 4280 Project Updated 04/12/2024 ###

Project 2: Scanner and Parser
    This C project implements a scanner and a parser based on the provided lexical definitions and grammar. The scanner reads input from either standard input or a file and tokenizes the input according to the defined rules. The parser then constructs a parse tree from the tokens generated by the scanner.

Scanner Features
    Supports case-sensitive identifiers, keywords, operators, and integers
    Handles comments starting with "//"
    Reports scanner errors with line numbers and character counts
    Implemented using an FSA table and driver (getToken())

Parser Features
    Constructs a parse tree based on the provided grammar
    Supports the following constructs:
        Program structure (vars, tape, func, block)
        Variable declarations (with and without initialization)
        Arithmetic expressions
        Input/output statements (cin, cout)
        Conditional statements (if-then)
        Loops (while, repeat-until)
        Assignment statements
        Labels and goto statements
        Pick statements
    Reports parser errors with line numbers and character counts

Files
    main.c: The main entry point of the program, processes command-line arguments, calls the parser, and prints the parse tree
    scanner.c: Implementation of the scanner logic
    scanner.h: Header file for the scanner, containing function declarations and definitions
    parser.c: Implementation of the parser logic
    parser.h: Header file for the parser, containing function declarations and definitions
    token.h: Header file defining the token types and structures

Usage
    To compile the project, use the provided Makefile by running the command:

        make

    To run the parser, use the following command:

        ./frontEnd \[file\]

    If \[file\] is provided, the parser will read input from the specified file.
    If no file is provided, the parser will read input from standard input.

    Example Usage:

        ./frontEnd input.txt

        ./frontEnd < input.txt

        ./frontEnd

The scanner recognizes the following lexical elements:

    Identifiers: Begin with an uppercase or lowercase letter and can contain letters, underscores, or digits.
    Keywords: start, stop, while, repeat, until, label, return, cin, cout, tape, jump, if, then, pick, create, set, func.
    Operators and delimiters: =, <, >, ==, =!=, :, :=, +, -, \*, /, ^, ., (, ), ,, {, }, ;, \[, \], ||, &&.
    Integers: Any sequence of decimal digits, no sign, no decimal point.
    Comments: Start with "//" and turn the rest of the line into a comment.

The scanner reports errors for any unrecognized characters or tokens that exceed the maximum length (currently 256).

The parser constructs a parse tree based on the provided grammar. It reports parser errors with line numbers and character counts.
